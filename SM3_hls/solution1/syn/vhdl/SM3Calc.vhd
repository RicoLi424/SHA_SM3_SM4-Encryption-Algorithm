-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SM3Calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    message_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    message_ce0 : OUT STD_LOGIC;
    message_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    messageLen : IN STD_LOGIC_VECTOR (7 downto 0);
    digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    digest_ce0 : OUT STD_LOGIC;
    digest_we0 : OUT STD_LOGIC;
    digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SM3Calc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SM3Calc,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx980t-ffg1930-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.196933,HLS_SYN_LAT=611,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=2005,HLS_SYN_LUT=20173,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_7380166F : STD_LOGIC_VECTOR (31 downto 0) := "01110011100000000001011001101111";
    constant ap_const_lv32_4914B2B9 : STD_LOGIC_VECTOR (31 downto 0) := "01001001000101001011001010111001";
    constant ap_const_lv32_172442D7 : STD_LOGIC_VECTOR (31 downto 0) := "00010111001001000100001011010111";
    constant ap_const_lv32_DA8A0600 : STD_LOGIC_VECTOR (31 downto 0) := "11011010100010100000011000000000";
    constant ap_const_lv32_A96F30BC : STD_LOGIC_VECTOR (31 downto 0) := "10101001011011110011000010111100";
    constant ap_const_lv32_163138AA : STD_LOGIC_VECTOR (31 downto 0) := "00010110001100010011100010101010";
    constant ap_const_lv32_E38DEE4D : STD_LOGIC_VECTOR (31 downto 0) := "11100011100011011110111001001101";
    constant ap_const_lv32_B0FB0E4E : STD_LOGIC_VECTOR (31 downto 0) := "10110000111110110000111001001110";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1F : STD_LOGIC_VECTOR (8 downto 0) := "000011111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_309_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_700 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln210_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln212_fu_320_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln212_reg_710 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_3_fu_366_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_3_reg_715 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_1_fu_516_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_6_fu_528_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_7_fu_664_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_737 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln236_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal messageBlock_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal messageBlock_ce0 : STD_LOGIC;
    signal messageBlock_we0 : STD_LOGIC;
    signal messageBlock_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal messageBlock_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal intermediateHash_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal intermediateHash_ce0 : STD_LOGIC;
    signal intermediateHash_we0 : STD_LOGIC;
    signal intermediateHash_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal intermediateHash_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal intermediateHash_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal intermediateHash_ce1 : STD_LOGIC;
    signal intermediateHash_we1 : STD_LOGIC;
    signal intermediateHash_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal intermediateHash_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processmessageblock_fu_297_ap_start : STD_LOGIC;
    signal grp_processmessageblock_fu_297_ap_done : STD_LOGIC;
    signal grp_processmessageblock_fu_297_ap_idle : STD_LOGIC;
    signal grp_processmessageblock_fu_297_ap_ready : STD_LOGIC;
    signal grp_processmessageblock_fu_297_intermediateHash_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_processmessageblock_fu_297_intermediateHash_ce0 : STD_LOGIC;
    signal grp_processmessageblock_fu_297_intermediateHash_we0 : STD_LOGIC;
    signal grp_processmessageblock_fu_297_intermediateHash_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processmessageblock_fu_297_intermediateHash_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_processmessageblock_fu_297_intermediateHash_ce1 : STD_LOGIC;
    signal grp_processmessageblock_fu_297_intermediateHash_we1 : STD_LOGIC;
    signal grp_processmessageblock_fu_297_intermediateHash_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processmessageblock_fu_297_messageBlock_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_processmessageblock_fu_297_messageBlock_ce0 : STD_LOGIC;
    signal p_Val2_2_reg_251 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_0_reg_263 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_274 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln222_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_285 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_processmessageblock_fu_297_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln212_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln224_1_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln238_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln238_1_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln216_2_fu_327_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln216_fu_330_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln216_1_fu_336_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln216_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln218_fu_346_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal pack_fu_340_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln218_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_356_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln_fu_377_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln212_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln212_1_fu_396_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln212_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln212_2_fu_400_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln212_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln212_fu_414_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln212_2_fu_430_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln212_1_fu_422_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln212_1_fu_438_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln212_3_fu_404_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln212_4_fu_444_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln212_fu_456_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_fu_462_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln212_5_fu_448_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln212_6_fu_452_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln212_1_fu_480_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln212_fu_486_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln212_fu_492_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln212_2_fu_498_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln212_3_fu_472_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln212_1_fu_504_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln212_2_fu_510_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln224_fu_534_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_538_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln224_fu_546_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln224_fu_558_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln224_2_fu_562_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln224_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln224_fu_575_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln224_1_fu_587_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_566_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln224_fu_581_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln224_fu_593_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln224_2_fu_608_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln224_2_fu_616_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln224_1_fu_601_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln224_3_fu_622_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln224_4_fu_626_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln224_fu_630_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln224_1_fu_636_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_642_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln238_fu_670_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln238_fu_674_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component processmessageblock IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        intermediateHash_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        intermediateHash_ce0 : OUT STD_LOGIC;
        intermediateHash_we0 : OUT STD_LOGIC;
        intermediateHash_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        intermediateHash_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        intermediateHash_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        intermediateHash_ce1 : OUT STD_LOGIC;
        intermediateHash_we1 : OUT STD_LOGIC;
        intermediateHash_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        intermediateHash_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        messageBlock_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        messageBlock_ce0 : OUT STD_LOGIC;
        messageBlock_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SM3Calc_messageBldEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SM3Calc_intermedieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    messageBlock_U : component SM3Calc_messageBldEe
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => messageBlock_address0,
        ce0 => messageBlock_ce0,
        we0 => messageBlock_we0,
        d0 => messageBlock_d0,
        q0 => messageBlock_q0);

    intermediateHash_U : component SM3Calc_intermedieOg
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => intermediateHash_address0,
        ce0 => intermediateHash_ce0,
        we0 => intermediateHash_we0,
        d0 => intermediateHash_d0,
        q0 => intermediateHash_q0,
        address1 => intermediateHash_address1,
        ce1 => intermediateHash_ce1,
        we1 => intermediateHash_we1,
        d1 => intermediateHash_d1,
        q1 => intermediateHash_q1);

    grp_processmessageblock_fu_297 : component processmessageblock
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_processmessageblock_fu_297_ap_start,
        ap_done => grp_processmessageblock_fu_297_ap_done,
        ap_idle => grp_processmessageblock_fu_297_ap_idle,
        ap_ready => grp_processmessageblock_fu_297_ap_ready,
        intermediateHash_address0 => grp_processmessageblock_fu_297_intermediateHash_address0,
        intermediateHash_ce0 => grp_processmessageblock_fu_297_intermediateHash_ce0,
        intermediateHash_we0 => grp_processmessageblock_fu_297_intermediateHash_we0,
        intermediateHash_d0 => grp_processmessageblock_fu_297_intermediateHash_d0,
        intermediateHash_q0 => intermediateHash_q0,
        intermediateHash_address1 => grp_processmessageblock_fu_297_intermediateHash_address1,
        intermediateHash_ce1 => grp_processmessageblock_fu_297_intermediateHash_ce1,
        intermediateHash_we1 => grp_processmessageblock_fu_297_intermediateHash_we1,
        intermediateHash_d1 => grp_processmessageblock_fu_297_intermediateHash_d1,
        intermediateHash_q1 => intermediateHash_q1,
        messageBlock_address0 => grp_processmessageblock_fu_297_messageBlock_address0,
        messageBlock_ce0 => grp_processmessageblock_fu_297_messageBlock_ce0,
        messageBlock_q0 => messageBlock_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_processmessageblock_fu_297_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_processmessageblock_fu_297_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_processmessageblock_fu_297_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processmessageblock_fu_297_ap_ready = ap_const_logic_1)) then 
                    grp_processmessageblock_fu_297_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_263 <= i_reg_700;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_263 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_1_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_274 <= i_6_fu_528_p2;
            elsif (((icmp_ln210_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_274 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_3_reg_285 <= i_7_reg_737;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_processmessageblock_fu_297_ap_done = ap_const_logic_1))) then 
                i_3_reg_285 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_2_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_2_reg_251 <= p_Result_1_fu_516_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_2_reg_251 <= ap_const_lv512_lc_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_7_reg_737 <= i_7_fu_664_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_700 <= i_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln210_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Result_3_reg_715 <= p_Result_3_fu_366_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln210_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln212_reg_710 <= trunc_ln212_fu_320_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln210_fu_303_p2, ap_CS_fsm_state4, ap_CS_fsm_state10, icmp_ln236_fu_658_p2, grp_processmessageblock_fu_297_ap_done, icmp_ln222_fu_522_p2, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln210_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln222_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_processmessageblock_fu_297_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln236_fu_658_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    and_ln212_1_fu_504_p2 <= (xor_ln212_2_fu_498_p2 and p_Val2_2_reg_251);
    and_ln212_2_fu_510_p2 <= (select_ln212_3_fu_472_p3 and and_ln212_fu_492_p2);
    and_ln212_fu_492_p2 <= (shl_ln212_1_fu_480_p2 and lshr_ln212_fu_486_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state10, icmp_ln236_fu_658_p2)
    begin
        if (((icmp_ln236_fu_658_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln236_fu_658_p2)
    begin
        if (((icmp_ln236_fu_658_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    digest_address0 <= zext_ln238_1_fu_685_p1(3 - 1 downto 0);

    digest_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            digest_ce0 <= ap_const_logic_1;
        else 
            digest_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    digest_d0 <= intermediateHash_q0;

    digest_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            digest_we0 <= ap_const_logic_1;
        else 
            digest_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_processmessageblock_fu_297_ap_start <= grp_processmessageblock_fu_297_ap_start_reg;
    i_6_fu_528_p2 <= std_logic_vector(unsigned(i_1_reg_274) + unsigned(ap_const_lv5_1));
    i_7_fu_664_p2 <= std_logic_vector(unsigned(i_3_reg_285) + unsigned(ap_const_lv4_1));
    i_fu_309_p2 <= std_logic_vector(unsigned(i_0_reg_263) + unsigned(ap_const_lv6_1));
    icmp_ln210_fu_303_p2 <= "1" when (i_0_reg_263 = ap_const_lv6_20) else "0";
    icmp_ln212_fu_390_p2 <= "1" when (unsigned(shl_ln_fu_377_p3) > unsigned(or_ln212_fu_384_p2)) else "0";
    icmp_ln222_fu_522_p2 <= "1" when (i_1_reg_274 = ap_const_lv5_10) else "0";
    icmp_ln224_fu_552_p2 <= "1" when (unsigned(shl_ln1_fu_538_p3) > unsigned(or_ln224_fu_546_p2)) else "0";
    icmp_ln236_fu_658_p2 <= "1" when (i_3_reg_285 = ap_const_lv4_8) else "0";

    intermediateHash_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, grp_processmessageblock_fu_297_intermediateHash_address0, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln238_fu_680_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            intermediateHash_address0 <= zext_ln238_fu_680_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            intermediateHash_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            intermediateHash_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            intermediateHash_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            intermediateHash_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            intermediateHash_address0 <= grp_processmessageblock_fu_297_intermediateHash_address0;
        else 
            intermediateHash_address0 <= "XXX";
        end if; 
    end process;


    intermediateHash_address1_assign_proc : process(ap_CS_fsm_state4, grp_processmessageblock_fu_297_intermediateHash_address1, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            intermediateHash_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            intermediateHash_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            intermediateHash_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            intermediateHash_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            intermediateHash_address1 <= grp_processmessageblock_fu_297_intermediateHash_address1;
        else 
            intermediateHash_address1 <= "XXX";
        end if; 
    end process;


    intermediateHash_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, grp_processmessageblock_fu_297_intermediateHash_ce0, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            intermediateHash_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            intermediateHash_ce0 <= grp_processmessageblock_fu_297_intermediateHash_ce0;
        else 
            intermediateHash_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    intermediateHash_ce1_assign_proc : process(ap_CS_fsm_state4, grp_processmessageblock_fu_297_intermediateHash_ce1, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            intermediateHash_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            intermediateHash_ce1 <= grp_processmessageblock_fu_297_intermediateHash_ce1;
        else 
            intermediateHash_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    intermediateHash_d0_assign_proc : process(ap_CS_fsm_state4, grp_processmessageblock_fu_297_intermediateHash_d0, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            intermediateHash_d0 <= ap_const_lv32_E38DEE4D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            intermediateHash_d0 <= ap_const_lv32_A96F30BC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            intermediateHash_d0 <= ap_const_lv32_172442D7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            intermediateHash_d0 <= ap_const_lv32_7380166F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            intermediateHash_d0 <= grp_processmessageblock_fu_297_intermediateHash_d0;
        else 
            intermediateHash_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    intermediateHash_d1_assign_proc : process(ap_CS_fsm_state4, grp_processmessageblock_fu_297_intermediateHash_d1, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            intermediateHash_d1 <= ap_const_lv32_B0FB0E4E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            intermediateHash_d1 <= ap_const_lv32_163138AA;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            intermediateHash_d1 <= ap_const_lv32_DA8A0600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            intermediateHash_d1 <= ap_const_lv32_4914B2B9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            intermediateHash_d1 <= grp_processmessageblock_fu_297_intermediateHash_d1;
        else 
            intermediateHash_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    intermediateHash_we0_assign_proc : process(ap_CS_fsm_state4, grp_processmessageblock_fu_297_intermediateHash_we0, icmp_ln222_fu_522_p2, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln222_fu_522_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            intermediateHash_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            intermediateHash_we0 <= grp_processmessageblock_fu_297_intermediateHash_we0;
        else 
            intermediateHash_we0 <= ap_const_logic_0;
        end if; 
    end process;


    intermediateHash_we1_assign_proc : process(ap_CS_fsm_state4, grp_processmessageblock_fu_297_intermediateHash_we1, icmp_ln222_fu_522_p2, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln222_fu_522_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            intermediateHash_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            intermediateHash_we1 <= grp_processmessageblock_fu_297_intermediateHash_we1;
        else 
            intermediateHash_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln212_fu_486_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln212_6_fu_452_p1(31-1 downto 0)))));
    lshr_ln224_1_fu_636_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln224_4_fu_626_p1(31-1 downto 0)))));
    lshr_ln224_fu_630_p2 <= std_logic_vector(shift_right(unsigned(select_ln224_1_fu_601_p3),to_integer(unsigned('0' & zext_ln224_3_fu_622_p1(31-1 downto 0)))));

    messageBlock_address0_assign_proc : process(ap_CS_fsm_state4, grp_processmessageblock_fu_297_messageBlock_address0, ap_CS_fsm_state9, zext_ln224_1_fu_653_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            messageBlock_address0 <= zext_ln224_1_fu_653_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            messageBlock_address0 <= grp_processmessageblock_fu_297_messageBlock_address0;
        else 
            messageBlock_address0 <= "XXXX";
        end if; 
    end process;


    messageBlock_ce0_assign_proc : process(ap_CS_fsm_state4, grp_processmessageblock_fu_297_messageBlock_ce0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            messageBlock_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            messageBlock_ce0 <= grp_processmessageblock_fu_297_messageBlock_ce0;
        else 
            messageBlock_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    messageBlock_d0 <= p_Result_s_fu_642_p2(32 - 1 downto 0);

    messageBlock_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln222_fu_522_p2)
    begin
        if (((icmp_ln222_fu_522_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            messageBlock_we0 <= ap_const_logic_1;
        else 
            messageBlock_we0 <= ap_const_logic_0;
        end if; 
    end process;

    message_address0 <= zext_ln212_fu_315_p1(5 - 1 downto 0);

    message_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            message_ce0 <= ap_const_logic_1;
        else 
            message_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln212_fu_384_p2 <= (shl_ln_fu_377_p3 or ap_const_lv8_7);
    or_ln224_fu_546_p2 <= (shl_ln1_fu_538_p3 or ap_const_lv9_1F);
    p_Result_1_fu_516_p2 <= (and_ln212_2_fu_510_p2 or and_ln212_1_fu_504_p2);
    
    p_Result_2_fu_356_p4_proc : process(pack_fu_340_p2, zext_ln218_fu_352_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_2_fu_356_p4 <= pack_fu_340_p2;
        if to_integer(unsigned(zext_ln218_fu_352_p1)) >= pack_fu_340_p2'low and to_integer(unsigned(zext_ln218_fu_352_p1)) <= pack_fu_340_p2'high then
            result(0) := '0';
            for i in ap_const_lv32_1'range loop
                result(0) := result(0) or ap_const_lv32_1(i);
            end loop;
            p_Result_2_fu_356_p4(to_integer(unsigned(zext_ln218_fu_352_p1))) <= result(0);
        end if;
    end process;

    p_Result_3_fu_366_p5 <= (p_Result_2_fu_356_p4(511 downto 8) & messageLen);
    p_Result_s_fu_642_p2 <= (lshr_ln224_fu_630_p2 and lshr_ln224_1_fu_636_p2);
    pack_fu_340_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_2_reg_251),to_integer(unsigned('0' & zext_ln216_1_fu_336_p1(31-1 downto 0)))));
    select_ln212_1_fu_422_p3 <= 
        zext_ln212_2_fu_400_p1 when (icmp_ln212_fu_390_p2(0) = '1') else 
        zext_ln212_1_fu_396_p1;
    select_ln212_2_fu_430_p3 <= 
        xor_ln212_fu_408_p2 when (icmp_ln212_fu_390_p2(0) = '1') else 
        zext_ln212_1_fu_396_p1;
    select_ln212_3_fu_472_p3 <= 
        tmp_fu_462_p4 when (icmp_ln212_fu_390_p2(0) = '1') else 
        shl_ln212_fu_456_p2;
    select_ln212_fu_414_p3 <= 
        zext_ln212_1_fu_396_p1 when (icmp_ln212_fu_390_p2(0) = '1') else 
        zext_ln212_2_fu_400_p1;
    select_ln224_1_fu_601_p3 <= 
        tmp_3_fu_566_p4 when (icmp_ln224_fu_552_p2(0) = '1') else 
        p_Result_3_reg_715;
    select_ln224_2_fu_608_p3 <= 
        xor_ln224_fu_581_p2 when (icmp_ln224_fu_552_p2(0) = '1') else 
        zext_ln224_fu_558_p1;
    select_ln224_fu_593_p3 <= 
        sub_ln224_fu_575_p2 when (icmp_ln224_fu_552_p2(0) = '1') else 
        sub_ln224_1_fu_587_p2;
    shl_ln1_fu_538_p3 <= (trunc_ln224_fu_534_p1 & ap_const_lv5_0);
    shl_ln212_1_fu_480_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln212_5_fu_448_p1(31-1 downto 0)))));
    shl_ln212_fu_456_p2 <= std_logic_vector(shift_left(unsigned(zext_ln212_3_fu_404_p1),to_integer(unsigned('0' & zext_ln212_4_fu_444_p1(31-1 downto 0)))));
    shl_ln_fu_377_p3 <= (trunc_ln212_reg_710 & ap_const_lv3_0);
    sub_ln216_fu_330_p2 <= std_logic_vector(signed(ap_const_lv10_200) - signed(zext_ln216_2_fu_327_p1));
    sub_ln224_1_fu_587_p2 <= std_logic_vector(unsigned(zext_ln224_2_fu_562_p1) - unsigned(zext_ln224_fu_558_p1));
    sub_ln224_2_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln224_fu_593_p3));
    sub_ln224_fu_575_p2 <= std_logic_vector(unsigned(zext_ln224_fu_558_p1) - unsigned(zext_ln224_2_fu_562_p1));
    
    tmp_3_fu_566_p4_proc : process(p_Result_3_reg_715)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_3_fu_566_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := p_Result_3_reg_715;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_3_fu_566_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_3_fu_566_p4_i) := p_Result_3_reg_715(512-1-tmp_3_fu_566_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_566_p4 <= resvalue(512-1 downto 0);
    end process;

    
    tmp_fu_462_p4_proc : process(shl_ln212_fu_456_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_fu_462_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := shl_ln212_fu_456_p2;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_fu_462_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_fu_462_p4_i) := shl_ln212_fu_456_p2(512-1-tmp_fu_462_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_462_p4 <= resvalue(512-1 downto 0);
    end process;

    trunc_ln212_fu_320_p1 <= i_0_reg_263(5 - 1 downto 0);
    trunc_ln224_fu_534_p1 <= i_1_reg_274(4 - 1 downto 0);
    trunc_ln238_fu_670_p1 <= i_3_reg_285(3 - 1 downto 0);
    xor_ln212_1_fu_438_p2 <= (select_ln212_fu_414_p3 xor ap_const_lv10_1FF);
    xor_ln212_2_fu_498_p2 <= (ap_const_lv512_lc_2 xor and_ln212_fu_492_p2);
    xor_ln212_fu_408_p2 <= (zext_ln212_1_fu_396_p1 xor ap_const_lv10_1FF);
    xor_ln218_fu_346_p2 <= (zext_ln216_fu_324_p1 xor ap_const_lv9_1FF);
    xor_ln224_fu_581_p2 <= (zext_ln224_fu_558_p1 xor ap_const_lv10_1FF);
    xor_ln238_fu_674_p2 <= (trunc_ln238_fu_670_p1 xor ap_const_lv3_7);
    zext_ln212_1_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_377_p3),10));
    zext_ln212_2_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln212_fu_384_p2),10));
    zext_ln212_3_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(message_q0),512));
    zext_ln212_4_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln212_2_fu_430_p3),512));
    zext_ln212_5_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln212_1_fu_422_p3),512));
    zext_ln212_6_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln212_1_fu_438_p2),512));
    zext_ln212_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_263),64));
    zext_ln216_1_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln216_fu_330_p2),512));
    zext_ln216_2_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(messageLen),10));
    zext_ln216_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(messageLen),9));
    zext_ln218_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln218_fu_346_p2),32));
    zext_ln224_1_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_274),64));
    zext_ln224_2_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln224_fu_546_p2),10));
    zext_ln224_3_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln224_2_fu_608_p3),512));
    zext_ln224_4_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln224_2_fu_616_p2),512));
    zext_ln224_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_538_p3),10));
    zext_ln238_1_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_285),64));
    zext_ln238_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln238_fu_674_p2),64));
end behav;
